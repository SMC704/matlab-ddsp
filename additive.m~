% ADDITIVE SYNTH
%
% INPUTS:
%
% sample_rate: int
% amplitudes: Frame-wise oscillator peak amplitude. Shape: [n_frames, 1]
% harmonic distribution: Frame-wise harmonic amplitude variations. Shape. [n_harmonics]
% f0: Frame-wise fundamental frequency in Hz. Shape: [n_frames, 1]
% shift: Shift fundamental frequency, range -12 (one octave down) to 12 (one octave up), 0: no effect
% stretch: Stretch/squeeze harmonic frequencies, range -1 (max squeezed) to 1 (max stretched), 0: no effect
%
% RETURNS:
%
% Sample-wise audio signal

function [audio,last_phases] = additive(n_samples, sample_rate, amplitudes, harmonic_distribution, f0, prev_phases, shift, stretch)
    
    % Resize the input
    amplitudes = amplitudes(1:n_samples,1);
    f0 = f0(1:n_samples,1);
    
    % Incorporate shift parameter
    %if (shift > 0)
        f0 = f0 + (f0 * 1/12 * shift);
    elseif (shift < 0)
        f0 = f0 + (f0 * 1/12 * shift * 0.5);            
    end
    
    % Scale the amplitudes
%     amplitudes = scale_fn(amplitudes);
%     harmonic_distribution = scale_fn(harmonic_distribution);
    
    % Bandlimit the harmonic distribution
    n_harmonics = size(harmonic_distribution, 1);
    harmonic_frequencies = get_harmonic_frequencies(f0, n_harmonics, stretch);
    harmonic_distribution = remove_above_nyquist(harmonic_frequencies, harmonic_distribution, sample_rate);
    
    % Normalize the harmonic distribution
%     harm_sum = sum(harmonic_distribution,2);
%     for c = 1:size(harmonic_distribution,2)
%         harmonic_distribution(1:end,c) = harmonic_distribution(1:end,c) ./ harm_sum;
%     end
    
    % Create harmonic amplitudes
    harmonic_amplitudes = zeros(size(amplitudes,1),size(harmonic_distribution,1));
    for c = 1:size(harmonic_amplitudes,2)
        harmonic_amplitudes(1:end,c) = harmonic_distribution(c) * amplitudes;
    end
    
    harmonic_angular_frequencies = harmonic_frequencies * 2 * pi; %radiant/second
    harmonic_angular_frequencies = harmonic_angular_frequencies / sample_rate; %radiant/sample
    
    % Accumulate phase and synthesize
    phases = cumsum(harmonic_angular_frequencies);
    
    % Save last phases of all harmonics for next buffer;
    for c = 1:size(phases,2)
       phases(1:end,c) = phases(1:end,c)+prev_phases(c,1); 
    end
    phases = mod(phases, 2*pi);
    last_phases = phases(end,:);
    
    % Convert to waveforms
    wavs = sin(phases);
    audio = zeros(size(amplitudes));
    for c = 1:size(harmonic_amplitudes,2)
        audio(1:end) = audio(1:end) + harmonic_amplitudes(1:end,c) .* wavs(1:end,c);
    end
end

% Scale Function
% Exponentiated Sigmoid pointwise nonlinearity
function y = scale_fn(x)
    exponent = 10.0;
    max_value = 2.0;
    threshold = 1e-7;
    y = max_value * (1./(1+exp(-x))).^log(exponent) + threshold;
end

% Calculate sample-wise oscillator frequencies of harmonics
function harmonic_frequencies = get_harmonic_frequencies(f0, n_harmonics, stretch)
    f_ratios = linspace(1, n_harmonics, n_harmonics);
    
    % Incorporate stretch parameter and shift back to f0
    if (stretch > 0)
        f_ratios = f_ratios + (f_ratios * stretch) - stretch;
    elseif (stretch < 0)
        f_ratios = f_ratios + (f_ratios * stretch * 0.5) - (stretch * 0.5);
    end
    
    harmonic_frequencies = f0 * f_ratios;
end

% Set amplitudes for oscillators above nyquist to 0
function harmonic_distribution_nyquist = remove_above_nyquist(harmonic_frequencies, harmonic_distribution, sample_rate)
    harmonic_distribution(harmonic_frequencies(1,1:end) >= sample_rate/2) = 0;
    harmonic_distribution_nyquist = harmonic_distribution;
end

% function plot_controls(amplitudes, harmonic_distribution, f0)
%     
%     % figure('Name', 'Synth Controls');
%     t = tiledlayout(3,1);
%     nexttile;
%     plot(amplitudes);
%     title('Amplitudes');
%     ylabel('amplitude');
%     nexttile;
%     plot(harmonic_distribution);
%     title('Harmonic Distribution');
%     ylabel('amplitude');
%     nexttile;
%     plot(f0);
%     title('Fundamental Frequency');
%     ylabel('frequency');
%     xlabel(t,'samples');
%     t.TileSpacing = 'none';
%     
% end